AWSTemplateFormatVersion: 2010-09-09
Metadata:
  Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
Resources:
  ApigatewayService:
    Properties:
      Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ApigwnetNetwork
          Subnets:
          - subnet-07e700c7d40852725
          - subnet-0c47347954c1717f4
          - subnet-0ebca36d96481e15e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ApigatewayServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: apigateway
      TaskDefinition:
        Ref: ApigatewayTaskDefinition
    Type: AWS::ECS::Service
  ApigatewayServiceDiscoveryEntry:
    Properties:
      Description: '"apigateway" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: apigateway
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ApigatewayTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - apigateway-standalone-ecs.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: Apigateway_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Apigateway_ResolvConf_InitContainer
        Environment:
        - Name: APIGW_ELASTICSEARCH_TENANTID
          Value: apigateway
        - Name: IDS_HEAP_SIZE
          Value: 1g
        - Name: JAVA_MAX_MEM
          Value: 1g
        - Name: JAVA_MIN_MEM
          Value: 1g
        - Name: JAVA_OPTS
        - Name: RUNTIME_WATT_PROPERTIES
          Value: watt.net.timeout=400 watt.server.threadPool=50 watt.server.threadPoolMin=25
            watt.net.maxClientKeepaliveConns=10
        Essential: true
        Image: 815840818766.dkr.ecr.us-east-1.amazonaws.com/webmethods-apigateway-standalone:dev-10.7.2-36@sha256:0100bfc3de3cd361ad1c1c44548c357ca23a78b0636b613a73bc2edf607c0da9
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: apigateway
        Ulimits:
        - HardLimit: 65535
          Name: nofile
          SoftLimit: 65535
      Cpu: "2048"
      ExecutionRoleArn:
        Ref: ApigatewayTaskExecutionRole
      Family: apigateway-standalone-ecs-apigateway
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ApigatewayTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: apigateway
    Type: AWS::IAM::Role
  Apigwnet80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: reverseproxy_nginx:80/tcp on apigwnet network
      FromPort: 80
      GroupId:
        Ref: ApigwnetNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  ApigwnetNetwork:
    Properties:
      GroupDescription: apigateway-standalone-ecs Security Group for apigwnet network
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.network
        Value: apigateway-standalone-ecs_apigwnet
      VpcId: vpc-0cecc9e7fa3bee3f1
    Type: AWS::EC2::SecurityGroup
  ApigwnetNetworkIngress:
    Properties:
      Description: Allow communication within network apigwnet
      GroupId:
        Ref: ApigwnetNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ApigwnetNetwork
    Type: AWS::EC2::SecurityGroupIngress
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project apigateway-standalone-ecs
      Name: apigateway-standalone-ecs.local
      Vpc: vpc-0cecc9e7fa3bee3f1
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  ContinuouscurlrunnerService:
    DependsOn:
    - ReverseproxynginxService
    Properties:
      Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ApigwnetNetwork
          Subnets:
          - subnet-07e700c7d40852725
          - subnet-0c47347954c1717f4
          - subnet-0ebca36d96481e15e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ContinuouscurlrunnerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: continuous-curl-runner
      TaskDefinition:
        Ref: ContinuouscurlrunnerTaskDefinition
    Type: AWS::ECS::Service
  ContinuouscurlrunnerServiceDiscoveryEntry:
    Properties:
      Description: '"continuous-curl-runner" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: continuous-curl-runner
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ContinuouscurlrunnerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - apigateway-standalone-ecs.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: Continuouscurlrunner_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Continuouscurlrunner_ResolvConf_InitContainer
        Environment:
        - Name: REQUESTS_INTERVAL
          Value: "5"
        - Name: REQUESTS_JSON
          Value: '[{"method":"GET","url":"http://reverseproxy_nginx/gateway/bookstore/1.0/books"},{"method":"GET","url":"http://reverseproxy_nginx/gateway/uszip/1.0/findZip/Rockville/MD"},{"method":"GET","url":"http://reverseproxy_nginx/gateway/covid/1.0/findCovidByZip?zip_code=22201"}]'
        - Name: REQUESTS_SELECTION
          Value: random
        Essential: true
        Image: docker.io/lanimall/continuous-curl-runner:0.0.1@sha256:c59b44bcd9fddf28cd4c89841181516e67a8a60aed6d32550c1b882fa09454be
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: continuous-curl-runner
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ContinuouscurlrunnerTaskExecutionRole
      Family: apigateway-standalone-ecs-continuous-curl-runner
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ContinuouscurlrunnerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: continuous-curl-runner
    Type: AWS::IAM::Role
  DefaultNetwork:
    Properties:
      GroupDescription: apigateway-standalone-ecs Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.network
        Value: apigateway-standalone-ecs_default
      VpcId: vpc-0cecc9e7fa3bee3f1
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/apigateway-standalone-ecs
    Type: AWS::Logs::LogGroup
  ReverseproxynginxService:
    DependsOn:
    - ReverseproxynginxTCP80Listener
    - ApigatewayService
    Properties:
      Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: reverseproxy_nginx
        ContainerPort: 80
        TargetGroupArn:
          Ref: ReverseproxynginxTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ApigwnetNetwork
          Subnets:
          - subnet-07e700c7d40852725
          - subnet-0c47347954c1717f4
          - subnet-0ebca36d96481e15e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ReverseproxynginxServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: reverseproxy_nginx
      TaskDefinition:
        Ref: ReverseproxynginxTaskDefinition
    Type: AWS::ECS::Service
  ReverseproxynginxServiceDiscoveryEntry:
    Properties:
      Description: '"reverseproxy_nginx" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: reverseproxy_nginx
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ReverseproxynginxTCP80Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: ReverseproxynginxTCP80TargetGroup
        Type: forward
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-east-1:815840818766:loadbalancer/app/ecs-tests-alb/1eb54db2982c4b6f
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ReverseproxynginxTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      TargetType: ip
      VpcId: vpc-0cecc9e7fa3bee3f1
      HealthCheckPath: /rest/apigateway/health
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: "180"
      - Key: slow_start.duration_seconds
        Value: "300"
      - Key: load_balancing.algorithm.type
        Value: round_robin
      - Key: stickiness.enabled
        Value: "true"
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: "3600"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ReverseproxynginxTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - apigateway-standalone-ecs.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: Reverseproxynginx_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Reverseproxynginx_ResolvConf_InitContainer
        Essential: true
        Image: 815840818766.dkr.ecr.us-east-1.amazonaws.com/webmethods-apigateway-reverseproxy:dev-10.7.2-36@sha256:a7f38b2fedf0d759502dd1cf022eb7d402ffde398c9c40cdfdd1f323e12c11d0
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: reverseproxy_nginx
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
        Ulimits:
        - HardLimit: 65535
          Name: nofile
          SoftLimit: 65535
      Cpu: "512"
      ExecutionRoleArn:
        Ref: ReverseproxynginxTaskExecutionRole
      Family: apigateway-standalone-ecs-reverseproxy_nginx
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ReverseproxynginxTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: reverseproxy_nginx
    Type: AWS::IAM::Role
  WebmethodssampleapisbookstoreService:
    Properties:
      Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ApigwnetNetwork
          Subnets:
          - subnet-07e700c7d40852725
          - subnet-0c47347954c1717f4
          - subnet-0ebca36d96481e15e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - WebmethodssampleapisbookstoreServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: webmethods-sample-apis-bookstore
      TaskDefinition:
        Ref: WebmethodssampleapisbookstoreTaskDefinition
    Type: AWS::ECS::Service
  WebmethodssampleapisbookstoreServiceDiscoveryEntry:
    Properties:
      Description: '"webmethods-sample-apis-bookstore" service discovery entry in
        Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: webmethods-sample-apis-bookstore
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  WebmethodssampleapisbookstoreTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - apigateway-standalone-ecs.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: Webmethodssampleapisbookstore_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Webmethodssampleapisbookstore_ResolvConf_InitContainer
        Essential: true
        Image: 815840818766.dkr.ecr.us-east-1.amazonaws.com/webmethods-sample-apis-bookstore:dev-0.0.4@sha256:41c18bec73478d205210812f2e107d31f47ac5b58f8bcabfb2b6c06798f61e26
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: webmethods-sample-apis-bookstore
      Cpu: "256"
      ExecutionRoleArn:
        Ref: WebmethodssampleapisbookstoreTaskExecutionRole
      Family: apigateway-standalone-ecs-webmethods-sample-apis-bookstore
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  WebmethodssampleapisbookstoreTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: webmethods-sample-apis-bookstore
    Type: AWS::IAM::Role
  WebmethodssampleapiscovidService:
    Properties:
      Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ApigwnetNetwork
          Subnets:
          - subnet-07e700c7d40852725
          - subnet-0c47347954c1717f4
          - subnet-0ebca36d96481e15e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - WebmethodssampleapiscovidServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: webmethods-sample-apis-covid
      TaskDefinition:
        Ref: WebmethodssampleapiscovidTaskDefinition
    Type: AWS::ECS::Service
  WebmethodssampleapiscovidServiceDiscoveryEntry:
    Properties:
      Description: '"webmethods-sample-apis-covid" service discovery entry in Cloud
        Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: webmethods-sample-apis-covid
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  WebmethodssampleapiscovidTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - apigateway-standalone-ecs.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: Webmethodssampleapiscovid_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Webmethodssampleapiscovid_ResolvConf_InitContainer
        Essential: true
        Image: 815840818766.dkr.ecr.us-east-1.amazonaws.com/webmethods-sample-apis-covid:dev-0.0.4@sha256:41c18bec73478d205210812f2e107d31f47ac5b58f8bcabfb2b6c06798f61e26
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: webmethods-sample-apis-covid
      Cpu: "256"
      ExecutionRoleArn:
        Ref: WebmethodssampleapiscovidTaskExecutionRole
      Family: apigateway-standalone-ecs-webmethods-sample-apis-covid
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  WebmethodssampleapiscovidTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: webmethods-sample-apis-covid
    Type: AWS::IAM::Role
  WebmethodssampleapisuszipService:
    Properties:
      Cluster: arn:aws:ecs:us-east-1:815840818766:cluster/myecstests
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: ApigwnetNetwork
          Subnets:
          - subnet-07e700c7d40852725
          - subnet-0c47347954c1717f4
          - subnet-0ebca36d96481e15e
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - WebmethodssampleapisuszipServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: webmethods-sample-apis-uszip
      TaskDefinition:
        Ref: WebmethodssampleapisuszipTaskDefinition
    Type: AWS::ECS::Service
  WebmethodssampleapisuszipServiceDiscoveryEntry:
    Properties:
      Description: '"webmethods-sample-apis-uszip" service discovery entry in Cloud
        Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: webmethods-sample-apis-uszip
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  WebmethodssampleapisuszipTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - apigateway-standalone-ecs.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: Webmethodssampleapisuszip_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Webmethodssampleapisuszip_ResolvConf_InitContainer
        Essential: true
        Image: 815840818766.dkr.ecr.us-east-1.amazonaws.com/webmethods-sample-apis-uszip:dev-0.0.4@sha256:41c18bec73478d205210812f2e107d31f47ac5b58f8bcabfb2b6c06798f61e26
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: apigateway-standalone-ecs
        Name: webmethods-sample-apis-uszip
      Cpu: "256"
      ExecutionRoleArn:
        Ref: WebmethodssampleapisuszipTaskExecutionRole
      Family: apigateway-standalone-ecs-webmethods-sample-apis-uszip
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  WebmethodssampleapisuszipTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: apigateway-standalone-ecs
      - Key: com.docker.compose.service
        Value: webmethods-sample-apis-uszip
    Type: AWS::IAM::Role
