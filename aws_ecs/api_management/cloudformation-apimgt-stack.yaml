AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ECSCluster:
    Type: AWS::ECS::Cluster::ClusterName
  VPCID:
    Type: AWS::EC2::VPC::Id
  SubnetIDs:
    Description: The array of Subnet IDs for the Subnet group
    Type: List<AWS::EC2::Subnet::Id>
  ECRName:
    Description: The name of the ECR registry to use
    Type: String
  ImageApiGateway:
    Description: The name of the image for the api gateway
    Type: String
  ImageApiGatewayTag:
    Description: The tag of the image for the api gateway
    Type: String
  ImagePortal:
    Description: The name of the image for the api portal
    Type: String
  ImagePortalTag:
    Description: The tag of the image for the api portal
    Type: String
  ImageSampleApisBookStore:
    Description: The name of the image for the sample Bookstore api
    Type: String
  ImageSampleApisUsZip:
    Description: The name of the image for the sample UsZip api
    Type: String
  ImageSampleApisTag:
    Description: The tag of the image for the sample apis
    Type: String

Metadata:
  Cluster:
    Ref: ECSCluster
Resources:
  Apigateway5555Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: Apigateway5555TargetGroup
          Type: forward
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-east-1:815840818766:loadbalancer/app/ecs-tests-alb/1eb54db2982c4b6f
      Port: 5555
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Apigateway5555TargetGroup:
    Properties:
      Port: 5555
      Protocol: HTTP
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
      TargetType: ip
      VpcId:
        Ref: VPCID
      HealthCheckPath: /rest/apigateway/health
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "180"
        - Key: slow_start.duration_seconds
          Value: "300"
        - Key: load_balancing.algorithm.type
          Value: round_robin
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "3600"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Apigateway9072Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: Apigateway9072TargetGroup
          Type: forward
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-east-1:815840818766:loadbalancer/app/ecs-tests-alb/1eb54db2982c4b6f
      Port: 9072
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Apigateway9072TargetGroup:
    Properties:
      Port: 9072
      Protocol: HTTP
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
      TargetType: ip
      VpcId:
        Ref: VPCID
      HealthCheckPath: /apigatewayui/login
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "180"
        - Key: slow_start.duration_seconds
          Value: "300"
        - Key: load_balancing.algorithm.type
          Value: round_robin
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "3600"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ApigatewayService:
    DependsOn:
      - Apigateway9072Listener
      - Apigateway5555Listener
    Properties:
      Cluster: 
        Ref: ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: apigateway
          ContainerPort: 9072
          TargetGroupArn:
            Ref: Apigateway9072TargetGroup
        - ContainerName: apigateway
          ContainerPort: 5555
          TargetGroupArn:
            Ref: Apigateway5555TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: ApimgtnetNetwork
          Subnets:
            Ref: SubnetIDs
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ApigatewayServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: apigateway
      TaskDefinition:
        Ref: ApigatewayTaskDefinition
      HealthCheckGracePeriodSeconds: 600
    Type: AWS::ECS::Service
  ApigatewayServiceDiscoveryEntry:
    Properties:
      Description: '"apigateway" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: apigateway
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ApigatewayTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - apimgt-stack.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: Apigateway_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Apigateway_ResolvConf_InitContainer
          Environment:
            - Name: APIGW_ELASTICSEARCH_TENANTID
              Value: apigateway
            - Name: IDS_HEAP_SIZE
              Value: 512m
            - Name: JAVA_MAX_MEM
              Value: 512m
            - Name: JAVA_MIN_MEM
              Value: 512m
            - Name: JAVA_OPTS
            - Name: RUNTIME_WATT_PROPERTIES
              Value:
                watt.net.timeout=400 watt.server.threadPool=50 watt.server.threadPoolMin=25
                watt.net.maxClientKeepaliveConns=10
          Essential: true
          Image: !Sub ${ECRName}/${ImageApiGateway}:${ImageApiGatewayTag}
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: apigateway
          PortMappings:
            - ContainerPort: 9072
              HostPort: 9072
            - ContainerPort: 5555
              HostPort: 5555
          Ulimits:
            - HardLimit: 65535
              Name: nofile
              SoftLimit: 65535
      Cpu: "2048"
      ExecutionRoleArn:
        Ref: ApigatewayTaskExecutionRole
      Family: apimgt-stack-apigateway
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  ApigatewayTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: apigateway
    Type: AWS::IAM::Role
  Apimgtnet5555Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: apigateway:5555/ on apimgtnet network
      FromPort: 5555
      GroupId:
        Ref: ApimgtnetNetwork
      IpProtocol: "-1"
      ToPort: 5555
    Type: AWS::EC2::SecurityGroupIngress
  Apimgtnet9072Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: apigateway:9072/ on apimgtnet network
      FromPort: 9072
      GroupId:
        Ref: ApimgtnetNetwork
      IpProtocol: "-1"
      ToPort: 9072
    Type: AWS::EC2::SecurityGroupIngress
  Apimgtnet18101Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: apiportal:18101/ on apimgtnet network
      FromPort: 18101
      GroupId:
        Ref: ApimgtnetNetwork
      IpProtocol: "-1"
      ToPort: 18101
    Type: AWS::EC2::SecurityGroupIngress
  ApimgtnetNetwork:
    Properties:
      GroupDescription:
        apimgt-stack Security Group for
        apimgtnet network
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.network
          Value: apimgt-stack_apimgtnet
      VpcId:
        Ref: VPCID
    Type: AWS::EC2::SecurityGroup
  ApimgtnetNetworkIngress:
    Properties:
      Description: Allow communication within network apimgtnet
      GroupId:
        Ref: ApimgtnetNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ApimgtnetNetwork
    Type: AWS::EC2::SecurityGroupIngress
  Apiportal18101Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: Apiportal18101TargetGroup
          Type: forward
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-east-1:815840818766:loadbalancer/app/ecs-tests-alb/1eb54db2982c4b6f
      Port: 18101
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Apiportal18101TargetGroup:
    Properties:
      Port: 18101
      Protocol: HTTP
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
      TargetType: ip
      VpcId:
        Ref: VPCID
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "180"
        - Key: slow_start.duration_seconds
          Value: "600"
        - Key: load_balancing.algorithm.type
          Value: round_robin
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "3600"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ApiportalService:
    DependsOn:
      - Apiportal18101Listener
    Properties:
      Cluster:  
        Ref: ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: apiportal
          ContainerPort: 18101
          TargetGroupArn:
            Ref: Apiportal18101TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: ApimgtnetNetwork
          Subnets:
            Ref: SubnetIDs
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ApiportalServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: apiportal
      TaskDefinition:
        Ref: ApiportalTaskDefinition
      HealthCheckGracePeriodSeconds: 1200
    Type: AWS::ECS::Service
  ApiportalServiceDiscoveryEntry:
    Properties:
      Description: '"apiportal" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: apiportal
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ApiportalTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - apimgt-stack.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: Apiportal_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Apiportal_ResolvConf_InitContainer
          Environment:
            - Name: LB_EXT_HOST
              Value: aws-alb-hostname
            - Name: LB_EXT_PORT
              Value: "18101"
            - Name: LB_EXT_SCHEME
              Value: http
          Essential: true
          Image: !Sub ${ECRName}/${ImagePortal}:${ImagePortalTag}
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: apiportal
          PortMappings:
            - ContainerPort: 18101
              HostPort: 18101
          Ulimits:
            - HardLimit: 65535
              Name: nofile
              SoftLimit: 65535
      Cpu: "4096"
      ExecutionRoleArn:
        Ref: ApiportalTaskExecutionRole
      Family: apimgt-stack-apiportal
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  ApiportalTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: apiportal
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project apimgt-stack
      Name: apimgt-stack.local
      Vpc:
        Ref: VPCID
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  DefaultNetwork:
    Properties:
      GroupDescription:
        apimgt-stack Security Group for
        default network
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.network
          Value: apimgt-stack_default
      VpcId:
        Ref: VPCID
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/apimgt-stack
    Type: AWS::Logs::LogGroup
  WebmethodssampleapisbookstoreService:
    Properties:
      Cluster:  
        Ref: ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: ApimgtnetNetwork
          Subnets:
            Ref: SubnetIDs
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - WebmethodssampleapisbookstoreServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: webmethods-sample-apis-bookstore
      TaskDefinition:
        Ref: WebmethodssampleapisbookstoreTaskDefinition
    Type: AWS::ECS::Service
  WebmethodssampleapisbookstoreServiceDiscoveryEntry:
    Properties:
      Description:
        '"webmethods-sample-apis-bookstore" service discovery entry in
        Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: webmethods-sample-apis-bookstore
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  WebmethodssampleapisbookstoreTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - apimgt-stack.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: Webmethodssampleapisbookstore_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Webmethodssampleapisbookstore_ResolvConf_InitContainer
          Essential: true
          Image: !Sub ${ECRName}/${ImageSampleApisBookStore}:${ImageSampleApisTag}
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: webmethods-sample-apis-bookstore
      Cpu: "256"
      ExecutionRoleArn:
        Ref: WebmethodssampleapisbookstoreTaskExecutionRole
      Family: apimgt-stack-webmethods-sample-apis-bookstore
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  WebmethodssampleapisbookstoreTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: webmethods-sample-apis-bookstore
    Type: AWS::IAM::Role
  WebmethodssampleapisuszipService:
    Properties:
      Cluster:  
        Ref: ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: ApimgtnetNetwork
          Subnets:
            Ref: SubnetIDs
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - WebmethodssampleapisuszipServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: webmethods-sample-apis-uszip
      TaskDefinition:
        Ref: WebmethodssampleapisuszipTaskDefinition
    Type: AWS::ECS::Service
  WebmethodssampleapisuszipServiceDiscoveryEntry:
    Properties:
      Description:
        '"webmethods-sample-apis-uszip" service discovery entry in Cloud
        Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: webmethods-sample-apis-uszip
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  WebmethodssampleapisuszipTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - apimgt-stack.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: Webmethodssampleapisuszip_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Webmethodssampleapisuszip_ResolvConf_InitContainer
          Essential: true
          Image: !Sub ${ECRName}/${ImageSampleApisUsZip}:${ImageSampleApisTag}
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: apimgt-stack
          Name: webmethods-sample-apis-uszip
      Cpu: "256"
      ExecutionRoleArn:
        Ref: WebmethodssampleapisuszipTaskExecutionRole
      Family: apimgt-stack-webmethods-sample-apis-uszip
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  WebmethodssampleapisuszipTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: apimgt-stack
        - Key: com.docker.compose.service
          Value: webmethods-sample-apis-uszip
    Type: AWS::IAM::Role
