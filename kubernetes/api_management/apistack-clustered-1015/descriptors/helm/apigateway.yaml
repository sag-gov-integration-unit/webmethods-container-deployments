---

# ## SAG GOV image
# image:
#   registry: ghcr.io/softwareag-government-solutions
#   repository: apigateway-minimal
#   pullPolicy: IfNotPresent
#   tag: 10.15

## SAG image
image:
  registry: sagcr.azurecr.io
  repository: apigateway-minimal
  pullPolicy: IfNotPresent
  tag: "10.15"

imagePullSecrets:
  - name: sag-containers-repo

licenseSecret:
  name: softwareag-apimgt-licenses
  key: apigateway-license
  path: license.xml

# note: this is not in effect if autoscaling in true
replicaCount: 2

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  # targetMemoryUtilizationPercentage: 90

resources:
  requests:
    memory: 1Gi
    cpu: 1
  limits:
    memory: 2Gi
    cpu: 2

podSecurityContext:
  runAsUser: 1724
  runAsGroup: 1724
  fsGroup: 1724

securityContext:
  allowPrivilegeEscalation: false

## type of clustering - possible values: none (default), terracotta, ignite
clustering:
  type: ignite
  healthCheck: true
  name: APIGatewayCluster
  sessionTimeout: 60
  actionOnStartupError: shutdown
  ignite:
    discoveryPort: 47100
    communicationPort: 47500
    portRange: 0

## connectivity to external elastic search
connectElasticSearch:
  enabled: true
  configsExistingSecrets: []
  configs: |-
    apigw:
      elasticsearch:
        tenantId: default
        hosts: elasticsearch-es-http:9200
        autostart: false
        http:
          keepAlive: true
          keepAliveMaxConnections: 10
          keepAliveMaxConnectionsPerRoute: 100
          connectionTimeout: 1000
          socketTimeout: 10000
          maxRetryTimeout: 100000
        https:
          enabled: false
        sniff:
          enable: false
          timeInterval: 1000
        outboundProxy:
          enabled: false
          alias: somealias
        clientHttpResponseSize: 1001231

## connectivity to external kibana
connectKibana:
  enabled: true
  configsExistingSecrets: []
  configs: |-
    apigw:
      kibana:
        dashboardInstance: http://kibana-kb-http:5601
        autostart: false

## wait for elastic search to become available
waitforelastic:
  enabled: true
  uri: http://elasticsearch-es-http:9200

envConfigs:
  apigw_wrapper_java_initmemory: "512"
  apigw_wrapper_java_maxmemory: "768"
  JAVA_OPTS: "-server -XX:+UseG1GC -XX:+DisableExplicitGC"

## ports exposed by the container
containerPorts:
  gwruntime: 5555
  gwruntimessl: 5543
  gwui: 9072
  gwuissl: 9073
  diag: 9999
  isruntime: 5543

# apply stickiness for the services that require it
service:
  gwruntime:
    port: 5555
  gwui:
    port: 9072
    annotations:
      traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
  isruntime:
    port: 6655
    annotations:
      traefik.ingress.kubernetes.io/service.sticky.cookie: "true"

# ingresses
ingress:
  gwruntime:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    host: webmethods-apigateway.domain.local
  gwui:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    host: webmethods-apigateway.domain.local
  isruntime:
    enabled: false
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    host: webmethods-apigateway-isruntime.domain.local